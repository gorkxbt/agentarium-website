import React, { useRef } from 'react';
import { useFrame } from '@react-three/fiber';
import { useGLTF, Text, Billboard, useTexture } from '@react-three/drei';
import * as THREE from 'three';

// Tree model
export function Tree({ position, scale = 1, variation = 0 }: { position: [number, number, number], scale?: number, variation?: number }) {
  const treeRef = useRef<THREE.Group>(null);
  
  // Tree trunk
  const trunkHeight = 0.8 + variation * 0.3;
  const trunkRadius = 0.15 + variation * 0.05;
  
  // Tree crown
  const crownRadius = 0.6 + variation * 0.2;
  const crownHeight = 1.2 + variation * 0.4;
  
  // Slight movement with breeze
  useFrame((state) => {
    if (treeRef.current) {
      const t = state.clock.getElapsedTime();
      treeRef.current.rotation.x = Math.sin(t * 0.1 + position[0]) * 0.02;
      treeRef.current.rotation.z = Math.sin(t * 0.15 + position[2]) * 0.02;
    }
  });
  
  return (
    <group ref={treeRef} position={position} scale={[scale, scale, scale]}>
      {/* Tree trunk */}
      <mesh castShadow position={[0, trunkHeight / 2, 0]}>
        <cylinderGeometry args={[trunkRadius, trunkRadius * 1.2, trunkHeight, 8]} />
        <meshStandardMaterial color="#5D4037" roughness={0.8} />
      </mesh>
      
      {/* Tree crown */}
      <mesh castShadow position={[0, trunkHeight + crownHeight / 2 - 0.1, 0]}>
        <coneGeometry args={[crownRadius, crownHeight, 8]} />
        <meshStandardMaterial color={variation > 0.5 ? "#2E7D32" : "#388E3C"} roughness={0.8} />
      </mesh>
    </group>
  );
}

// Park bench
export function ParkBench({ position, rotation = 0 }: { position: [number, number, number], rotation?: number }) {
  return (
    <group position={position} rotation={[0, rotation, 0]}>
      {/* Bench seat */}
      <mesh castShadow position={[0, 0.4, 0]}>
        <boxGeometry args={[1.5, 0.08, 0.6]} />
        <meshStandardMaterial color="#8D6E63" roughness={0.8} />
      </mesh>
      
      {/* Bench backrest */}
      <mesh castShadow position={[0, 0.8, -0.25]}>
        <boxGeometry args={[1.5, 0.7, 0.08]} />
        <meshStandardMaterial color="#8D6E63" roughness={0.8} />
      </mesh>
      
      {/* Bench legs */}
      {[-0.6, 0.6].map((x, i) => (
        <mesh key={i} castShadow position={[x, 0.2, 0]}>
          <boxGeometry args={[0.08, 0.4, 0.6]} />
          <meshStandardMaterial color="#5D4037" roughness={0.8} />
        </mesh>
      ))}
    </group>
  );
}

// Lamp post
export function LampPost({ position }: { position: [number, number, number] }) {
  return (
    <group position={position}>
      {/* Pole */}
      <mesh castShadow position={[0, 1.5, 0]}>
        <cylinderGeometry args={[0.05, 0.08, 3, 8]} />
        <meshStandardMaterial color="#37474F" roughness={0.6} metalness={0.5} />
      </mesh>
      
      {/* Lamp head */}
      <mesh castShadow position={[0, 3, 0]}>
        <sphereGeometry args={[0.2, 16, 16, 0, Math.PI * 2, 0, Math.PI / 2]} />
        <meshStandardMaterial color="#546E7A" roughness={0.4} metalness={0.6} />
      </mesh>
      
      {/* Light bulb */}
      <mesh position={[0, 3, 0]}>
        <sphereGeometry args={[0.1, 16, 16]} />
        <meshStandardMaterial 
          color="#FFF9C4" 
          emissive="#FFF59D"
          emissiveIntensity={1} 
          toneMapped={false}
        />
      </mesh>
      
      {/* Light source */}
      <pointLight
        position={[0, 3, 0]}
        intensity={1}
        distance={8}
        color="#FFF9C4"
        castShadow
        shadow-mapSize-width={512}
        shadow-mapSize-height={512}
      />
    </group>
  );
}

// Path section
export function PathSection({ position, rotation = 0, length = 2 }: { position: [number, number, number], rotation?: number, length?: number }) {
  return (
    <mesh 
      receiveShadow 
      position={position} 
      rotation={[0, rotation, 0]}
    >
      <planeGeometry args={[length, 0.8]} />
      <meshStandardMaterial 
        color="#D7CCC8" 
        roughness={1}
        metalness={0}
      />
    </mesh>
  );
}

// Fountain
export function Fountain({ position }: { position: [number, number, number] }) {
  const waterRef = useRef<THREE.Mesh>(null);
  const displacementMap = useTexture("https://cdn.jsdelivr.net/gh/pmndrs/drei-assets@master/noise.jpg");
  
  useFrame((state) => {
    if (waterRef.current && waterRef.current.material instanceof THREE.MeshStandardMaterial) {
      const t = state.clock.getElapsedTime();
      // Animate water surface
      waterRef.current.material.displacementScale = Math.sin(t * 2) * 0.05 + 0.05;
    }
  });
  
  return (
    <group position={position}>
      {/* Base */}
      <mesh receiveShadow position={[0, 0.2, 0]}>
        <cylinderGeometry args={[2, 2.2, 0.4, 32]} />
        <meshStandardMaterial color="#90A4AE" roughness={0.8} />
      </mesh>
      
      {/* Water basin */}
      <mesh receiveShadow position={[0, 0.5, 0]}>
        <cylinderGeometry args={[1.8, 1.8, 0.6, 32]} />
        <meshStandardMaterial color="#78909C" roughness={0.7} />
      </mesh>
      
      {/* Water surface */}
      <mesh ref={waterRef} receiveShadow position={[0, 0.7, 0]} rotation={[-Math.PI / 2, 0, 0]}>
        <circleGeometry args={[1.6, 32]} />
        <meshStandardMaterial 
          color="#81D4FA" 
          transparent
          opacity={0.8}
          roughness={0.1}
          metalness={0.3}
          displacementScale={0.05}
          displacementBias={0}
          displacementMap={displacementMap}
        />
      </mesh>
      
      {/* Center column */}
      <mesh castShadow position={[0, 1.2, 0]}>
        <cylinderGeometry args={[0.3, 0.4, 1, 16]} />
        <meshStandardMaterial color="#90A4AE" roughness={0.8} />
      </mesh>
      
      {/* Top basin */}
      <mesh castShadow position={[0, 1.8, 0]}>
        <cylinderGeometry args={[0.8, 0.7, 0.3, 16]} />
        <meshStandardMaterial color="#78909C" roughness={0.7} />
      </mesh>
    </group>
  );
} 